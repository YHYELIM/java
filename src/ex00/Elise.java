package ex00;

public class Elise {

    // int num =10; 힙변수ㅁ

    static String name = "엘리스";
    int height = 160;

    public Elise() {
    }

    void eat(int qty) {
        this.height = this.height + (10 * qty);// this=힙변수 같은클래스 안에라서 힙 접근가능하고 this사용가능
        // 같은 클래스 안에 있으면 this사용가능
        // 다른 클래스에서 height를 받으려면 레퍼런스가 필요
    }
}

public class MemApp {
    public static void main(String[] args) {
        Elise e = new Elise();// 우변만 실행한다하면 힙에 엘리스타입이 생성되고 height, eat들어감//좌변까지하면 e가 힙의 엘리스를 가리킴
        // e에 힙의 주소가 저장됨
        // 일정하지 않은 데이터=힙 데이터
        // 힙 데이터의 용량이 얼마인지 모르니까 메인 스택에주소만 저장(포인터) 값이 있는곳을 가리킴
        // 타입없는 변수는 =레퍼런스 변수 (크기모름)
        // 종료되면 팝
        e.eat(5);
        // eat이라는 스택 생성, 큐 생성

    }
    // .java 파일->컴파일->.class
    // 1.클래스 로드 -static키워드 찾기 엘리스 스태틱-name="엘리스" 멤앱 스태틱-main 스택이 생성
    // 2.static 로드 3.main 찾아서 실행(public이여야(접근 가능)하고 static붙어있어야함 -메모리에 떠야하니까)
    // 클래스 명.네임->엘리스 불러올수있음
    // static은 공기같은거 한번 뜨면 공유가능한다
    // stack은 스택끼리 못찾는다 같은 클래스 안의 힙은 찾을수있다
    // 스택이 들고있는 변수는 다 지역변수 나중에 다 사라진다
    // 지역변수 죽이기 싫으면 리턴하든 힙으로 옮기든
    // 어느 메서드 안에 있든 스태이틱 접근 가능, 힙에 접근 가능

    // 스택은 스택끼리 접근 못함
    // 힙은 접근 가능함
    // 1.메서드 내부에서 만든 변수는 지역변수 메서드는 실행시에만 잠깐 떠있어서 지역변수
    // 2. 클래스 내부에서 만든 변수는 힙변수
    // 3.메서드 내부에서 본인 클래스 힙변수 접근 됨
    // 4. 메서드 내부에서 다른 메서드 변수 접근 안됨
    // 5. 메서드 내부에서 다른 힙변수에 접근 안됨
    // 6. 유일하게 접근 가능 힙변수->this
    // 7. 다른 힙변수에 접근하고 싶다면 인수로 전달
}
